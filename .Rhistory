box.lty=0)
grid()}
step_size = 10    #set a step size
ave_step  = seq(1, length(stop_simulation), step_size)  #start the sequence
ave_vec = rep(NA, length(ave_step))                     #pre-allocating the vector
# Compute the simulations averages
t <- 0
for (i in ave_step){
t <- t + 1
ave_vec[t] = mean( stop_simulation[1:i] )
}
{plot(ave_vec , main = "Average stopping time",
xlab = "step", ylab = "Averege stopping time",
sub = "Simulation study", col = "steelblue" , type = "l" , lwd =3)
grid()}
Sim <- c(100, 1000, 10000, 100000, 1000000, 10000000)  # vector of the size
diff <- matrix(NA , 6 )       # inizialize the the vector of the result
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- pT(t_seq) - p_hat[t_seq]
i <- i +1
}
Sim <- c(100, 1000, 10000, 100000, 1000000, 10000000)  # vector of the size
diff <- matrix(NA , 6 )       # inizialize the the vector of the result
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- pT(t_seq) - p_hat[t_seq]
i <- i +1
}
diif
diff
pT(t_seq)
p_hat[t_seq]
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- pT(t_seq) - p_hat[t_seq]
diff <- matrix(NA , 6 )       # inizialize the the vector of the result
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- pT(t_seq) - p_hat[t_seq]
diff
pT(t_seq) - p_hat[t_seq]
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
diff
Sim <- c(100, 1000, 10000, 100000, 1000000, 10000000)  # vector of the size
diff <- matrix(NA , 6 )       # inizialize the the vector of the result
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
diff
mean(pT(t_seq) - p_hat[t_seq])
diff <- matrix(NA )       # inizialize the the vector of the result
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
diff
diff <- matrix(NA, length(Sim) )       # inizialize the the vector of the result
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
diff
setwd("~/Desktop/Documents/GitHub/SDS_HW1")
#Exercise_1
rm(list=Ã²ls())
#Exercise_1
rm(list=ls())
Sim <- c(100, 1000, 10000, 100000, 1000000, 10000000)  # vector of the size
diff <- matrix(NA , 6 )       # inizialize the the vector of the result
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- pT(t_seq) - p_hat[t_seq]
i <- i +1
}
pT <- function(t)  1/(t*(t+1))
t_seq <- 1:25      # Zooming between t = 1 and t = 25
Sim <- c(100, 1000, 10000, 100000, 1000000, 10000000)  # vector of the size
diff <- matrix(NA , 6 )       # inizialize the the vector of the result
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- pT(t_seq) - p_hat[t_seq]
i <- i +1
}
diff
pT(t_seq) - p_hat[t_seq]
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
Sim <- c(100, 1000, 10000, 100000, 1000000, 10000000)  # vector of the size
diff <- matrix(NA , 6 )       # inizialize the the vector of the result
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
i=1
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
diff
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
diff
i <- 1
?matrix
diff <- matrix(NA , nrow =  6 , ncol = M )       # inizialize the the vector of the result
M <- 1000    # Simulation size
diff <- matrix(NA , nrow =  6 , ncol = M )       # inizialize the the vector of the result
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
}
M <- 100    # Simulation size
diff <- matrix(NA , nrow =  6 , ncol = M )       # inizialize the the vector of the result
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
}
M <- 10    # Simulation size
diff <- matrix(NA , nrow =  6 , ncol = M )       # inizialize the the vector of the result
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i +1
}
}
diff
Sim <- c(100, 1000, 10000, 100000, 1000000)  # vector of the size
M <- 10    # Simulation size
diff <- matrix(NA , nrow =  6 , ncol = M )       # inizialize the the vector of the result
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i + 1
}
}
diff
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i + 1
}
}
diff
i <- 1
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
diff
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
i <- 1
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
diff
Sim <- c(100, 1000, 10000, 100000, 1000000)  # vector of the size
M <- 10    # Simulation size
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i + 1
}
}
diff
Sim <- c(100, 1000, 10000, 100000, 1000000)  # vector of the size
M <- 10    # Simulation size
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
for (j in 1:M){
i <- 0
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i + 1
}
}
diff
Sim <- c(100, 1000, 10000, 100000, 1000000)  # vector of the size
M <- 10    # Simulation size
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
for (i in 1:M){
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])}
}
diff
1:M
for (i in 1:M){print(i)}
j <- 1
for (i in 1:M){
j <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])}
j <- 1
}
diff
Sim <- c(100, 1000, 10000, 100000, 1000000)  # vector of the size
M <- 10    # Simulation size
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
for (i in 1:M){
j <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])}
j <- j + 1
}
Sim <- c(100, 1000, 10000, 100000, 1000000)  # vector of the size
M <- 10    # Simulation size
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
for (i in 1:M){
j <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])}
j <- j + 1
}
mean(pT(t_seq) - p_hat[t_seq])}
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i + 1
}
}
diff
Sim <- c(100, 1000, 10000, 100000, 1000000)  # vector of the size
M <- 10    # Simulation size
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
i <- i + 1
}
}
diff
j <- 1
i <- 1
s
s <- 100
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
diff
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
diff
j <- 1
i <- 1
s <- 100
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq])
diff
mean(pT(t_seq) - p_hat[t_seq])
stop_simulations
p_hat <- proportions(table(stop_simulations))
p_hat
p_hat[t_seq]
?mean
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq], na.rm = T)
diff
Sim <- c(100, 1000, 10000, 100000, 1000000)  # vector of the size
M <- 10    # Simulation size
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
diff
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq], na.rm = T)
diff
i <- i + 1
}
}
diff
diff[1,]
plot(diff[1,]9
plot(diff[1,])
plot(diff)
plot(diff[1,])
points(diff[2,] , col = 'blue')
plot(diff[1,] , ylim = c(-0.5,0.5))
points(diff[2,] , col = 'blue')
plot(diff[1,] , ylim = c(-0.05,0.05))
points(diff[2,] , col = 'blue')
plot(diff[1,] , ylim = c(-0.005,0.005))
points(diff[2,] , col = 'blue')
plot(diff[1,] , ylim = c(-0.009,0.009))
points(diff[2,] , col = 'blue')
points(diff[3,] , col = 'blue')
points(diff[3,] , col = 'red')
points(diff[4,] , col = 'green')
points(diff[5,])
points(diff[5,] , col = "pink")
plot(diff[1,] , ylim = c(-0.009,0.009), type = "l")
points(diff[2,] , col = 'blue')
plot(diff[1,] , ylim = c(-0.009,0.009), type = "l")
points(diff[2,] , col = 'blue' , type = "l")
points(diff[3,] , col = 'red', type = "l")
points(diff[4,] , col = 'green', type = "l")
points(diff[5,] , col = "pink", type = "l")
?plot
hist(diff[1,])
Sim <- c(100, 1000, 10000, 100000, 1000000, 10000000 )  # vector of the size
M <- 100    # Simulation size
diff <- matrix(NA , nrow =  length(Sim) , ncol = M )       # inizialize the the vector of the result
for (j in 1:M){
i <- 1
for (s in Sim){
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
p_hat <- proportions(table(stop_simulations))
diff[i,j] <- mean(pT(t_seq) - p_hat[t_seq], na.rm = T)
diff
i <- i + 1
}
}
diff
plot(diff[1,] , ylim = c(-0.009,0.009), type = "l" , main = "Error o")
plot(diff[1,] , ylim = c(-0.009,0.009), type = "l" , main = "Error")
points(diff[2,] , col = 'blue' , type = "l")
points(diff[3,] , col = 'red', type = "l")
points(diff[4,] , col = 'green', type = "l")
points(diff[5,] , col = "pink", type = "l")
hist(diff[1,])
hist(diff[2,])
hist(diff[3,])
hist(diff[4,])
hist(diff[5])
hist(diff[5,])
hist(diff[6,])
# Exercise_2
library(VGAM)
rm(list=ls())
##### Step Function for p_hat #####
# Defining step functions for p_hat
p_hat_func <- function(x , bins , p_hat ){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- p_hat[interval == levels]
return(f)
}
##### Step Function for q_hat #######
q_hat_func <- function(x, bins, q_hat){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- q_hat[interval == levels]
return(f)
}
###### Mixture distribution of Beta ######
dmixture <- function(x, shape_1 = 2 , shape_2 = 15 , shape_3 = 12 , shape_4 = 6 , pi = 0.6 ){
f <- pi * dbeta(x, shape1 = shape_1 , shape2 = shape_2) + (1 - pi) * dbeta(x, shape1 = shape_3 , shape2 = shape_4)
return(f)
}
##### Random sample from Mixture Beta  #####
rmixture <- function(n, shape_1 = 2 , shape_2 = 15 , shape_3 = 12 , shape_4 = 6 , pi = 0.6 ){
sam <- c()
u <- runif(n)
for (x in u){
if (x < pi) sam <-c(sam, rbeta(1, shape1 = shape_1 , shape2 = shape_2))
else sam <- c(sam , rbeta(1, shape1 = shape_3 , shape2 = shape_4) )
}
return(sam)
}
#######
m <- seq(5,50)
m <- seq(5,8)
Beta_sim <- lapply(m, simulation_function, sim_size = 100, n=100 , func='beta')
m <- seq(5,8)
Beta_sim <- lapply(m, simulation_function, sim_size = 100, n=100 , func='beta')
simulation_function <- function(m , sim_size = 100, n=100, h = 1/m , eps = .1, func='beta'){
print(m)
if(func == 'beta'){
distr = function(x) dbeta(x,shape1 = 10, shape2 = 10)
sample_distr = function(n) rbeta(n, 10, 10)}
else if(func == 'mixture'){
distr = dmixture
sample_distr = function(n) rmixture(n)}
else{stop("The 'func' input is wrong. Choose between 'beta' or 'mixture'!")}
for(rep in 1:sim_size){
integral_p <- c()       # Pre-allocate the vector of the integral
integral_q <- c()       # Pre-allocate the vector of the integral
X <- sample_distr(n)   # Generating the random sample from the beta
bins <- seq(0, 1, h)    # Set the bins
intervals <- cut(X, bins, include.lowest = T)  # Rename units with the bins they belong
pj_hat <- table(intervals) / n              # Finding the frequencies of units inside each bins
p_hat <- as.vector(pj_hat / h)              # Computing high of each bin dividing the frequencies for the width of the bin
nu <- rlaplace(m, 0, 2/eps)                 # Generating m values from a Laplacian: one for each bin
Dj <- table(intervals) + nu                 # Adding nu to every absolute frequencies of each bin
Dj[Dj < 0] = 0    # Set all the nagative values to 0 t
qj_hat = Dj
# Finding qj_hat dividing max(0, Dj) for the sum of Dj
if (sum(qj_hat) != 0){
qj_hat <- qj_hat / sum(qj_hat)} else {qj_hat <- rep(0, length(qj_hat))}
q_hat <- qj_hat / h      # Computing the high of the histogram dividing by the width of the columns
# Compute the function to integrate
to_integrate_1 <- function(x) {return(( distr(x) - p_hat_func(x,bins = bins , p_hat = p_hat ))^2)}
to_integrate_2 <- function(x) {return(( distr(x) - q_hat_func(x,bins = bins , q_hat = q_hat ))^2)}
# Compute the integral
p <- integrate( Vectorize(to_integrate_1) , lower = 0 , upper = 1, subdivisions=2000)$value
q <- integrate( Vectorize(to_integrate_2) , lower = 0 , upper = 1, subdivisions=2000)$value
integral_p <- c(integral_p, p)
integral_q <- c(integral_q, q)
}
mise_p <- mean(integral_p)   #Save the results
mise_q <- mean(integral_q)   #Save the results
return(c(mise_p , mise_q))
}
m <- seq(5,8)
Beta_sim <- lapply(m, simulation_function, sim_size = 100, n=100 , func='beta')
m <- seq(5,8)
Beta_sim_n1000_eps_1 <- lapply(m, simulation_function, sim_size = 100, n=1000 , func='beta', eps = .1)
Beta_sim_n1000_eps_1
data.frame(Beta_sim_n1000_eps_1)
Beta_sim_n1000_eps_1
Beta_sim_n1000_eps_1[1]
Beta_sim_n1000_eps_1[,1]
Beta_sim_n1000_eps_1[1,]
Beta_sim_n1000_eps_1[1]
Beta_sim_n1000_eps_1[1][1]
Beta_sim_n1000_eps_1[][1]
Beta_sim_n1000_eps_1[,1][1]
Beta_sim_n1000_eps_1[1][1]
Beta_sim_n1000_eps_1
Vecotrize(Beta_sim_n1000_eps_1)
as.vector(Beta_sim_n1000_eps_1)
as.vector(Beta_sim_n1000_eps_1)[1]
as.vector(Beta_sim_n1000_eps_1)
tab(Beta_sim_n1000_eps_1)
table(Beta_sim_n1000_eps_1)
data.
data.frame(Beta_sim_n1000_eps_1)
?data.frame
Beta_sim_n1000_eps_1
Beta_sim_n1000_eps_1[[1]]
Beta_sim_n1000_eps_1[[1]][1]
Beta_sim_n1000_eps_1[[]][1]
Beta_sim_n1000_eps_1[[1]][1]
Beta_sim_n1000_eps_1[[,]][1]
Beta_sim_n1000_eps_1[[,1]][1]
Beta_sim_n1000_eps_1[[1]][1]
Beta_sim_n1000_eps_1[[1]]

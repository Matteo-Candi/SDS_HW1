}
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
data <- c('mise_n_100_eps_01_simulationsize_100', 'mise_n_100_eps_0001_simulationsize_100', 'mise_n_1000_eps_01_simulationsize_100', 'mise_n_1000_eps_0001_simulationsize_100')
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
for(i in 1:4){
load(paste0('mise_data/', data[i], '.RData'))
d <- eval(parse(text = "mise"))
mise_p_vec <- d$mise_p
mise_q_vec <- d$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, font.size=1)
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
}
?mtext
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
data <- c('mise_n_100_eps_01_simulationsize_100', 'mise_n_100_eps_0001_simulationsize_100', 'mise_n_1000_eps_01_simulationsize_100', 'mise_n_1000_eps_0001_simulationsize_100')
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
for(i in 1:4){
load(paste0('mise_data/', data[i], '.RData'))
d <- eval(parse(text = "mise"))
mise_p_vec <- d$mise_p
mise_q_vec <- d$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
}
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
data <- c('mise_n_100_eps_01_simulationsize_100', 'mise_n_100_eps_0001_simulationsize_100', 'mise_n_1000_eps_01_simulationsize_100', 'mise_n_1000_eps_0001_simulationsize_100')
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
for(i in 1:4){
load(paste0('mise_data/', data[i], '.RData'))
d <- eval(parse(text = "mise"))
mise_p_vec <- d$mise_p
mise_q_vec <- d$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=2)
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
}
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
data <- c('mise_n_100_eps_01_simulationsize_100', 'mise_n_100_eps_0001_simulationsize_100', 'mise_n_1000_eps_01_simulationsize_100', 'mise_n_1000_eps_0001_simulationsize_100')
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
for(i in 1:4){
load(paste0('mise_data/', data[i], '.RData'))
d <- eval(parse(text = "mise"))
mise_p_vec <- d$mise_p
mise_q_vec <- d$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
}
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_01', 'beta_n100_eps_0001', 'beta_n1000_eps_01', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
}
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_1', 'beta_n100_eps_0001', 'beta_n1000_eps_01', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
}
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_1', 'beta_n100_eps_0001', 'beta_n1000_eps_01', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
poi
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
)
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_1', 'beta_n100_eps_0001', 'beta_n1000_eps_01', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_1', 'beta_n100_eps_0001', 'beta_n1000_eps_1', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
beta_n1000_eps_01 <- beta_n1000_eps_1
save(beta_n1000_eps_01, file='simulation_data/beta_n1000_eps_01.RData')
beta_n100_eps_01 <- beta_n100_eps_1
save(beta_n100_eps_01, file='simulation_data/beta_n100_eps_01.RData')
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_01', 'beta_n100_eps_0001', 'beta_n1000_eps_01', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
par(mfrow=c(2,2), font.main=1)
colors <- c('blue', 'red')
y_lim <- 10
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_01', 'beta_n100_eps_0001', 'beta_n1000_eps_01', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
### Mixture Beta Plot
data <- c('mixture_n100_eps_01', 'mixture_n100_eps_0001', 'mixture_n1000_eps_01', 'mixture_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("error.png", error = FALSE)
knitr::include_graphics("error.png", error = FALSE)
knitr::include_graphics("error.png", error = FALSE)
knitr::include_graphics("error.png", error = FALSE)
knitr::include_graphics("error.png", error = FALSE)
knitr::include_graphics("error.png", error = FALSE)
knitr::include_graphics("error", error = FALSE)
knitr::include_graphics("error", error = FALSE)
knitr::include_graphics("error", error = FALSE)
knitr::include_graphics("error", error = FALSE)
knitr::include_graphics("error", error = FALSE)
knitr::opts_chunk$set(echo = TRUE)
Sim <- c(100, 1000, 10000, 100000, 1000000, 10000000)  # vector of the size
fin <- c()    # inizialize the the vector of the result
timing_fun <- function(s){
beg <- Sys.time()     # starting time
stop_simulations <-  rgeom(n = s, prob = runif(n = s))   # run the simulation
fin <- Sys.time() - beg #ending time
return(fin)
}
results <- sapply(Sim , timing_fun)
tab_time <- data.frame (Simulation_size  = c("100", "1000", "10000", "100000", "1000000", "10000000") , Computational_time = results  )   # creating the dataframe of the results
tab_time
paste("The median speed over M is : " , median(results))
M <-  100000               # simulation size
beg <- Sys.time()         # start time
stop_simulation <-rgeom(n = M, prob = runif(n = M))     #runninng the simulation
fin <- Sys.time() - beg   # end time
p_hat <- proportions( table( stop_simulation ))
knitr::include_graphics("error", error = FALSE)
knitr::include_graphics("error", error = TRUE)
knitr::include_graphics("error.png", error = )
knitr::include_graphics("error.png", error = )
knitr::include_graphics("error.png", error = )
knitr::include_graphics("error.png", error = TRUE)
getwd()
knitr::include_graphics("error.png", error = TRUE)
knitr::include_graphics("error.png", error = TRUE)
knitr::include_graphics("error.png", error = TRUE)
knitr::include_graphics("error.png", error = TRUE)
knitr::include_graphics("error.png", error = FALSE)
knitr::include_graphics("error.png", error = FALSE)
setwd("~/Desktop/Documents/GitHub/SDS_HW1")
knitr::include_graphics("error.png", error = FALSE)
par(mfrow=c(2,2), font.main=1)
colors <- c("#2297E6", "#DF536B" )
y_lim <- 12
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_01', 'beta_n100_eps_0001', 'beta_n1000_eps_01', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
grid()
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
### Mixture Beta Plot
data <- c('mixture_n100_eps_01', 'mixture_n100_eps_0001', 'mixture_n1000_eps_01', 'mixture_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
par(mfrow=c(2,2), font.main=1)
colors <- c("#2297E6", "#DF536B" )
y_lim <- 12
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_01', 'beta_n100_eps_0001', 'beta_n1000_eps_01', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
grid()
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
### Mixture Beta Plot
data <- c('mixture_n100_eps_01', 'mixture_n100_eps_0001', 'mixture_n1000_eps_01', 'mixture_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
par(mfrow=c(2,2), font.main=1)
colors <- c("#2297E6", "#DF536B" )
y_lim <- 12
labels <- c("p_hat" , "q_hat")
eps <- c(.1, .001, .1, .001)
enne <- c(100, 100, 1000, 1000)
### Beta Plot
data <- c('beta_n100_eps_01', 'beta_n100_eps_0001', 'beta_n1000_eps_01', 'beta_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
grid()
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
### Mixture Beta Plot
data <- c('mixture_n100_eps_01', 'mixture_n100_eps_0001', 'mixture_n1000_eps_01', 'mixture_n1000_eps_0001')
for(i in 1:4){
load(paste0('simulation_data/', data[i], '.RData'))
d <- eval(parse(text = data[i]))
p_hat <- d$p_hat
q_hat <- d$q_hat
plot(5:(length(p_hat)+4), p_hat, ylab='MISE', xlab='', sub = bquote(epsilon == .(eps[i])), type='l', lwd=3, col=colors[1], ylim=c(0,y_lim), main = paste('n = ', enne[i]))
grid()
mtext(text = 'm',side = 1, line = 2, cex=.8)
points(5:(length(q_hat)+4), q_hat, type='l', lwd=3, col=colors[2])
}
plot(1,1)
par(mfrow = c(1,1))
plot(1,1)
?legend
legend("topright", c(expression(hat(p)), expression(hat(p))  ) , pch=1, title= "topright, inset = .02",inset = .02)
legend("topright", c(expression(hat(p)), expression(hat(q))  ) , pch=1, title= "topright, inset = .02",inset = .02)
par(mfrow = c(1,1))
plot(1,1)
legend("topright", c(expression(hat(p)), expression(hat(q))  ) , pch=1, title= "topright, inset = .02",inset = .02)
legend("topright", c(expression(hat(p)), expression(hat(q))  ) , pch=1, title= "topright, inset = .02",inset = .02)
legend("topright", c(expression(hat(p)), expression(hat(q))  ) , pch=2, title= "topright, inset = .02",inset = .02)
legend("topright",
legend = c( paste("MISE of " expression(hat(p)) , 3)),
col = c("cyan4","yellow"), lty=c(1,NA),pch=c(NA,24), cex=0.7,
box.lty=0)
legend("topright",
legend =c(expression(hat(p)) , 3) ,
col = c("cyan4","yellow"), lty=c(1,NA),pch=c(NA,24), cex=0.7,
box.lty=0)
par(mfrow = c(1,1))
plot(1,1)
legend("topright",
legend =c(expression(hat(p)) , 3) ,
col = c("cyan4","yellow"), lty=c(1,NA),pch=c(NA,24), cex=0.7,
box.lty=0)
legend("topright",legend = c(expression(hat(p)) , "d" ), col = 2 , lty = 1 ,merge = TRUE, bg = "lightgray")
legend("topright",legend = c(paste("D", expression(hat(p)))   , "d" )
, col = 2 , lty = 1 ,merge = TRUE, bg = "lightgray")
legend("topright",legend = c(paste("MISE of " , expression(hat(p)))   , "d" )
, col = 2 , lty = 1 ,merge = TRUE, bg = "lightgray")
legend("topright",legend = c(paste("MISE of " , expression(hat(p)))   , paste("MISE of " , expression(hat(q))) ), col = 2 , lty = 1 ,merge = TRUE, bg = "lightgray")
legend("topright",legend = c(paste("MISE of " , expression(hat(p)))   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray")
legend("topright",legend = c(paste("MISE of " , expression(hat(p)))   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
setwd("~/Desktop/Documents/GitHub/SDS_HW1")
![](/Users/paolo/Desktop/Documents/GitHub/SDS_HW1/Picture/Beta_plots.png)
![legend](/Users/paolo/Desktop/Documents/GitHub/SDS_HW1/Picture/legend.png)
knitr::include_graphics(Users/paolo/Desktop/Documents/GitHub/SDS_HW1/Picture/Beta_plots.png)
![](/Users/paolo/Desktop/Documents/GitHub/SDS_HW1/Picture/Beta_plots.png)
<div style="width:50px; height:20px">
![legend](/Users/paolo/Desktop/Documents/GitHub/SDS_HW1/Picture/legend.png)
legend("topright",legend = c(paste("MISE of " , expression(hat(p)))   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
par(mfrow = c(1,1))
plot(1,1)
legend("topright",legend = c(paste("MISE of " , expression(hat(p)))   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c(paste("MISE of " , hat(p) )   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c(paste("MISE of " , hat(p) )   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
par(mfrow = c(1,1))
plot(1,1)
legend("topright",legend = c(paste("MISE of " , hat(p) )   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c(paste("MISE of " , hat(p) )   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c(expression(hat(p)))   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
plot(1,1)
legend("topright",legend = c(expression(hat(p)))   , paste("MISE of " , expression(hat(q))) ), col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c( expression(hat(p))) ,  expression(hat(p)))) , col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c( expression(hat(p)) ,  expression(hat(p)) ) , col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c( "MISE of "expression(hat(p)) ,  expression(hat(p)) ) , col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c( "MISE of " ,expression(hat(p)) ,  expression(hat(p)) ) , col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c( paste("Mise of"),expression(hat(p)) ,  expression(hat(p)) ) , col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
par(mfrow = c(1,1))
plot(1,1)
legend("topright",legend = c(paste("Mise of"),expression(hat(p)) ,  expression(hat(p)) ) , col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c(paste("Mise of",expression(hat(p))) ,  expression(hat(p)) ) , col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c(paste("Mise of", expression(hat(p))) ,  expression(hat(p)) ) , col = c("#2297E6" , "#DF536B") , lty = 1 ,merge = TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c(expression(paste("MISE of",hat(p))),
expression(paste("MISE of") , hat(q))) ,
col = c("#2297E6" , "#DF536B") , lty = 1,
merge =TRUE, bg = "lightgray", lwd = 3)
par(mfrow = c(1,1))
plot(1,1)
legend("topright",legend = c(expression(paste("MISE of ",hat(p))),
expression(paste("MISE of ") , hat(q))) ,
col = c("#2297E6" , "#DF536B") , lty = 1,
merge =TRUE, bg = "lightgray", lwd = 3)
legend("topright",legend = c(expression(paste("MISE of ",hat(p))),
expression(paste("MISE of " , hat(q)))) ,
col = c("#2297E6" , "#DF536B") , lty = 1,
merge =TRUE, bg = "lightgray", lwd = 3)
par(mfrow = c(1,1))
plot(1,1)
legend("topright",legend = c(expression(paste("MISE of ",hat(p))),
expression(paste("MISE of " , hat(q)))) ,
col = c("#2297E6" , "#DF536B") , lty = 1,
merge =TRUE, bg = "lightgray", lwd = 3)
<div style="width:100px; height:100px">
![Us](/Users/paolo/Desktop/Documents/GitHub/SDS_HW1/Picture/surf.jpeg)
---
Mixture_sim_n100_eps_1 <- lapply(m, simulation_function, sim_size = simulation_size, n=100 , func='mixture', eps = .1)
Mixture_sim_n100_eps_1 <- lapply(m, simulation_function, sim_size = simulation_size, n=100 , func='mixture', eps = .1)
Mixture_sim_n100_eps_1 <- lapply(m, simulation_function, sim_size = simulation_size, n=100 , func='mixture', eps = .1)
Beta_sim_n1000_eps_0001 <- lapply(m, simulation_function, sim_size = simulation_size, n=1000 , func='beta', eps = 0.001)
rm(list=ls())       #Clear output
library(VGAM)       # Library for the Laplacian Function
set.seed(13112221)  # For reprocibility
##### Step Function for p_hat #####
# Defining step functions for p_hat
p_hat_func <- function(x , bins , p_hat ){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- p_hat[interval == levels]
return(f)
}
##### Step Function for q_hat #######
q_hat_func <- function(x, bins, q_hat){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- q_hat[interval == levels]
return(f)
}
##### Mixture distribution of Beta ######
dmixture <- function(x, shape_1 = 2 , shape_2 = 15 , shape_3 = 12 , shape_4 = 6 , pi = 0.6 ){
f <- pi * dbeta(x, shape1 = shape_1 , shape2 = shape_2) + (1 - pi) * dbeta(x, shape1 = shape_3 , shape2 = shape_4)
return(f)
}
##### Random sample from Mixture Beta  #####
rmixture <- function(n, shape_1 = 2 , shape_2 = 15 , shape_3 = 12 , shape_4 = 6 , pi = 0.6 ){
sam <- c()
u <- runif(n)
for (x in u){
if (x < pi) sam <-c(sam, rbeta(1, shape1 = shape_1 , shape2 = shape_2))
else sam <- c(sam , rbeta(1, shape1 = shape_3 , shape2 = shape_4) )
}
return(sam)
}
#####  Simulation Function #######
simulation_function <- function(m , sim_size = 100, n=100, h = 1/m , eps = .1, func='beta'){
print(m)
if(func == 'beta'){
distr = function(x) dbeta(x,shape1 = 10, shape2 = 10)
sample_distr = function(n) rbeta(n, 10, 10)}
else if(func == 'mixture'){
distr = dmixture
sample_distr = function(n) rmixture(n)}
else{stop("The 'func' input is wrong. Choose between 'beta' or 'mixture'!")}
for(rep in 1:sim_size){
integral_p <- c()       # Pre-allocate the vector of the integral
integral_q <- c()       # Pre-allocate the vector of the integral
X <- sample_distr(n)   # Generating the random sample from the beta
bins <- seq(0, 1, h)    # Set the bins
intervals <- cut(X, bins, include.lowest = T)  # Rename units with the bins they belong
pj_hat <- table(intervals) / n              # Finding the frequencies of units inside each bins
p_hat <- as.vector(pj_hat / h)              # Computing high of each bin dividing the frequencies for the width of the bin
nu <- rlaplace(m, 0, 2/eps)                 # Generating m values from a Laplacian: one for each bin
Dj <- table(intervals) + nu                 # Adding nu to every absolute frequencies of each bin
Dj[Dj < 0] = 0    # Set all the nagative values to 0 t
qj_hat = Dj
# Finding qj_hat dividing max(0, Dj) for the sum of Dj
if (sum(qj_hat) != 0){
qj_hat <- qj_hat / sum(qj_hat)} else {qj_hat <- rep(0, length(qj_hat))}
q_hat <- qj_hat / h      # Computing the high of the histogram dividing by the width of the columns
# Compute the function to integrate
to_integrate_1 <- function(x) {return(( distr(x) - p_hat_func(x,bins = bins , p_hat = p_hat ))^2)}
to_integrate_2 <- function(x) {return(( distr(x) - q_hat_func(x,bins = bins , q_hat = q_hat ))^2)}
# Compute the integral
p <- integrate( Vectorize(to_integrate_1) , lower = 0 , upper = 1, subdivisions=2000)$value
q <- integrate( Vectorize(to_integrate_2) , lower = 0 , upper = 1, subdivisions=2000)$value
integral_p <- c(integral_p, p)
integral_q <- c(integral_q, q)
}
mise_p <- mean(integral_p)   #Save the results
mise_q <- mean(integral_q)   #Save the results
return(c(mise_p , mise_q))
}
Mixture_sim_n100_eps_1 <- lapply(m, simulation_function, sim_size = simulation_size, n=100 , func='mixture', eps = .1)
m <- seq(5,7)
Mixture_sim_n100_eps_1 <- lapply(m, simulation_function, sim_size = simulation_size, n=100 , func='mixture', eps = .1)
simulation_size <- 100
Mixture_sim_n100_eps_1 <- lapply(m, simulation_function, sim_size = simulation_size, n=100 , func='mixture', eps = .1)
voti <- seq(14,30,1)
voti
?sample

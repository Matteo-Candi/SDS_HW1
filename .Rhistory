legend('topleft', legend=c(expression(hat(p)), expression(hat(p))), col=c('blue', 'red'), lwd=3)
eps <- c(.1, .001)
colors <- c('blue', 'red')
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1])
points(5:(length(M)+4), mise_p_vec, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(p))), col=colors, lwd=3)
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1])
points(5:(length(M)+4), -mise_p_vec, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1])
points(5:(length(M)+4), mise_p_vec+1, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
par(mfrow=c(2,2))
colors <- c('blue', 'red')
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1])
points(5:(length(M)+4), mise_p_vec+1, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main=100)
points(5:(length(M)+4), mise_p_vec+1, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
#First chart
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100')
points(5:(length(M)+4), mise_p_vec+1, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
#First chart
mise_p_vec <- 5:(length(M)+4) #change it
par(mfrow=c(2,2))
colors <- c('blue', 'red')
#First chart
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100')
par(mfrow=c(2,2))
# Fourth chart
mise_p_vec <- 5:(length(M)+4) #change it
par(mfrow=c(2,2))
colors <- c('blue', 'red')
# First chart
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100')
points(5:(length(M)+4), mise_p_vec+1, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Second chart
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .001)), type='l', lwd=3, col=colors[1], main='n = 100')
points(5:(length(M)+4), mise_p_vec+1, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Third chart
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 1000')
points(5:(length(M)+4), mise_p_vec+1, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Fourth chart
mise_p_vec <- 5:(length(M)+4) #change it
plot(5:(length(M)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .001)), type='l', lwd=3, col=colors[1], main='n = 1000')
points(5:(length(M)+4), mise_p_vec+1, type='l', lwd=3, col=colors[2])
legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
library(VGAM)
M <- seq(5, 50, 1)
n <- 100
eps <- .1
sample_size <- 50
p_hat_func <- function(x, m){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- p_hat[interval == levels]
return(f)}
q_hat_func <- function(x){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- q_hat[interval == levels]
return(f)}
MSE_p <- function(x) (dbeta(x, 10, 10) - p_hat_func(x))^2
MSE_q <- function(x) (dbeta(x, 10, 10) - q_hat_func(x))^2
mise_p <- c()
mise_q <- c()
for(m in M){
print(m)
for(rep in 1:sample_size){
integral_p <- c()
integral_q <- c()
h <- 1/m
bins <- seq(0, 1, h)
intervals <- cut(rbeta(n, 10, 10), bins, include.lowest = T)
p_hat <- as.vector( (table(intervals) / n) / h)
Dj <- table(intervals) + rlaplace(m, 0, 8/eps^2)
qj_hat <- c()
for(d in Dj){
qj_hat <- c(qj_hat, max(d,0))}
if (sum(qj_hat) != 0){
qj_hat <- (qj_hat / sum(qj_hat)) / h} else {qj_hat <- rep(0, length(qj_hat))}
integral_p <- c(integral_p, integrate(Vectorize(MSE_p), lower=0, upper=1, subdivisions=2000)$value)
integral_q <- c(integral_q, integrate(Vectorize(MSE_q), lower=0, upper=1, subdivisions=2000)$value)
}
mise_p <- c(mise_p, mean(integral_p))
mise_q <- c(mise_q, mean(integral_q))
}
mise_p <- c()
mise_q <- c()
for(m in M){
print(m)
for(rep in 1:sample_size){
integral_p <- c()
integral_q <- c()
h <- 1/m
bins <- seq(0, 1, h)
intervals <- cut(rbeta(n, 10, 10), bins, include.lowest = T)
p_hat <- as.vector( (table(intervals) / n) / h)
Dj <- table(intervals) + rlaplace(m, 0, 8/eps^2)
qj_hat <- c()
for(d in Dj){
qj_hat <- c(qj_hat, max(d,0))}
if (sum(qj_hat) != 0){
q_hat <- (qj_hat / sum(qj_hat)) / h} else {q_hat <- rep(0, length(qj_hat))}
integral_p <- c(integral_p, integrate(Vectorize(MSE_p), lower=0, upper=1, subdivisions=2000)$value)
integral_q <- c(integral_q, integrate(Vectorize(MSE_q), lower=0, upper=1, subdivisions=2000)$value)
}
mise_p <- c(mise_p, mean(integral_p))
mise_q <- c(mise_q, mean(integral_q))
}
plot(5:(length(M)+4), mise_p, col='blue', pch=16,ylim=c(0,10), xlab='m', type='l')
points(5:(length(M)+4), mise_q, col='red', pch=16, type='l')
par(mfrow=c(1,1))
plot(5:(m+4), mise_p, col='blue', pch=16,ylim=c(0,10), xlab='m', type='l')
points(5:(m+4), mise_q, col='red', pch=16, type='l')
mise_p
length(mise_p)
5:(m+4)
length(5:(m+4))
plot(5:(m), mise_p, col='blue', pch=16,ylim=c(0,10), xlab='m', type='l')
length(5:(m))
plot(5:(m-1), mise_p, col='blue', pch=16,ylim=c(0,10), xlab='m', type='l')
points(5:(m-1), mise_q, col='red', pch=16, type='l')
# Simulation --------------------------------------------------------------
# Importing packages to use Laplace function
library(VGAM)
# Defining step functions for p_hat and q_hat
p_hat_func <- function(x, m){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- p_hat[interval == levels]
return(f)
}
q_hat_func <- function(x){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- q_hat[interval == levels]
return(f)
}
# Defining MSE function (value inside integral of MISE)
MSE_p <- function(x) (dbeta(x, 10, 10) - p_hat_func(x))^2
MSE_q <- function(x) (dbeta(x, 10, 10) - q_hat_func(x))^2
M <- seq(5, 10, 1)
n <- 100
eps <- .1
mise_p <- c()
mise_q <- c()
for(m in M){
print(m)
for(rep in 1:100){
integral_p <- c()
integral_q <- c()
# Setting h
h <- 1/m
# Generating the random sample from the beta
X <- rbeta(n, 10, 10)
# Set the bins
bins <- seq(0, 1, h)
# Rename units with the bins they belong
intervals <- cut(X, bins, include.lowest = T)
# Finding the frequencies of units inside each bins
pj_hat <- table(intervals) / n
# Computing high of each bin dividing the frequencies for the width of the bin
p_hat <- as.vector(pj_hat / h)
p_hat
# Generating m values from a Laplacian: one for each bin
nu <- rlaplace(m, 0, 2/eps)
nu
# Adding nu to every absolute frequencies of each bin
Dj <- table(intervals) + nu
# Finding qj_hat dividing max(0, Dj) for the sum of Dj
qj_hat <- c()
for(d in Dj){
qj_hat <- c(qj_hat, max(d,0))
}
if (sum(qj_hat) != 0){
qj_hat <- qj_hat / sum(qj_hat)} else {qj_hat <- rep(0, length(qj_hat))}
# Computing the high of the histogram dividing by the width of the columns
q_hat <- qj_hat / h
# Computing integral
p <- integrate(Vectorize(MSE_p), lower=0, upper=1, subdivisions=2000)$value
q <- integrate(Vectorize(MSE_q), lower=0, upper=1, subdivisions=2000)$value
integral_p <- c(integral_p, p)
integral_q <- c(integral_q, q)
}
mise_p <- c(mise_p, mean(integral_p))
mise_q <- c(mise_q, mean(integral_q))
}
# Simulation --------------------------------------------------------------
# Importing packages to use Laplace function
library(VGAM)
# Defining step functions for p_hat and q_hat
p_hat_func <- function(x, m){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- p_hat[interval == levels]
return(f)
}
q_hat_func <- function(x){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- q_hat[interval == levels]
return(f)
}
# Defining MSE function (value inside integral of MISE)
MSE_p <- function(x) (dbeta(x, 10, 10) - p_hat_func(x))^2
MSE_q <- function(x) (dbeta(x, 10, 10) - q_hat_func(x))^2
M <- seq(5, 10, 1)
n <- 100
eps <- .1
mise_p <- c()
mise_q <- c()
for(m in M){
print(m)
for(rep in 1:50){
integral_p <- c()
integral_q <- c()
# Setting h
h <- 1/m
# Generating the random sample from the beta
X <- rbeta(n, 10, 10)
# Set the bins
bins <- seq(0, 1, h)
# Rename units with the bins they belong
intervals <- cut(X, bins, include.lowest = T)
# Finding the frequencies of units inside each bins
pj_hat <- table(intervals) / n
# Computing high of each bin dividing the frequencies for the width of the bin
p_hat <- as.vector(pj_hat / h)
p_hat
# Generating m values from a Laplacian: one for each bin
nu <- rlaplace(m, 0, 2/eps)
nu
# Adding nu to every absolute frequencies of each bin
Dj <- table(intervals) + nu
# Finding qj_hat dividing max(0, Dj) for the sum of Dj
qj_hat <- c()
for(d in Dj){
qj_hat <- c(qj_hat, max(d,0))
}
if (sum(qj_hat) != 0){
qj_hat <- qj_hat / sum(qj_hat)} else {qj_hat <- rep(0, length(qj_hat))}
# Computing the high of the histogram dividing by the width of the columns
q_hat <- qj_hat / h
# Computing integral
p <- integrate(Vectorize(MSE_p), lower=0, upper=1, subdivisions=2000)$value
q <- integrate(Vectorize(MSE_q), lower=0, upper=1, subdivisions=2000)$value
integral_p <- c(integral_p, p)
integral_q <- c(integral_q, q)
}
mise_p <- c(mise_p, mean(integral_p))
mise_q <- c(mise_q, mean(integral_q))
}
par(mfrow=c(1,1))
plot(5:(length(M)+4), mise_p, col='blue', pch=16,ylim=c(0,10), xlab='m', type='l')
points(5:(length(M)+4), mise_q, col='red', pch=16, type='l')
save(a,b,'ciao.RData')
a <- c(1,2,3)
b <- c(3,4,5)
save(a,b,'ciao.RData')
save(a,b,'ciao.RData')
save(a,b,file='ciao.RData')
u <- load('ciao.RData')
u
u$a
a <- c(1,2,3)
b <- c(3,4,5)
save(a,b,file='ciao.RData')
u <- load('ciao.RData')
u$a
save(c(a,b),file='ciao.RData')
u <- load('ciao.RData')
u$a
save(list=c(a,b),file='ciao.RData')
a <- c(1,2,3)
b <- c(3,4,5)
save(list=c(a,b),file='ciao.RData')
u <- load('ciao.RData')
u$a
?save
a <- c(1,2,3)
b <- c(3,4,5)
saveRDS(c(a,b),file='ciao.RData')
u <- load('ciao.RData')
u$a
u <- load('ciao.RData')
load('ciao.RData')
a <- c(1,2,3)
b <- c(3,4,5)
saveRDS(c(a,b),file='ciao.RData')
load('ciao.RData')
u$a
a <- c(1,2,3)
b <- c(3,4,5)
saveRDS(c(a,b),file='ciao.RData')
load('ciao.RData')
a <- c(1,2,3)
b <- c(3,4,5)
saveRDS(list=c(a,b),file='ciao.RData')
load('ciao.RData')
a <- c(1,2,3)
b <- c(3,4,5)
saveRDS(list=c('a','b'), file='ciao.RData')
saveRDS(c('a','b'), file='ciao.RData')
load('ciao.RData')
u$a
saveRDS(list=c('a','b'), file='ciao.RData')
a <- list(1,2,3)
b <- list(3,4,5)
saveRDS(list=c('a','b'), file='ciao.RData')
load('ciao.RData')
u$a
load('ciao.RData')
a <- list(a=c(1,2,3))
b <- list(b=c(3,4,5))
saveRDS(list=c('a','b'), file='ciao.RData')
load('ciao.RData')
View(a)
u <- cbind(a,b)
a <- c(1,2,3)
b <- c(3,4,5)
u <- cbind(a,b)
saveRDS(u, file='ciao.RData')
load('ciao.RData')
save(u, file='ciao.RData')
load('ciao.RData')
View(u)
View(u)
j <- load('ciao.RData')
u$a
u[1]
u <- data.frame(a,b)
a <- c(1,2,3)
b <- c(3,4,5)
u <- data.frame(a,b)
save(u, file='ciao.RData')
load('ciao.RData')
u$a
length(5:50)
par(mfrow=c(2,2))
colors <- c('blue', 'red')
# First chart
load('mise_data/mise_n_100_eps_01_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+5), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100')
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100')
points(5:(length(mise_q_vec)+5), mise_q_vec, type='l', lwd=3, col=colors[2])
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100', ylim=c(0,2))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100', ylim=c(0,5))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100', ylim=c(0,10))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100', ylim=c(0,8))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# Second chart
load('mise_data/mise_n_100_eps_0001_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .001)), type='l', lwd=3, col=colors[1], main='n = 100', ylim=c(0,8))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# Third chart
load('mise_data/mise_n_1000_eps_01_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 1000', ylim=c(0,10))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# Fourth chart
load('mise_data/mise_n_1000_eps_0001_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .001)), type='l', lwd=3, col=colors[1], main='n = 1000', ylim=c(0,8))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
par(mfrow=c(2,2))
colors <- c('blue', 'red')
# First chart
load('mise_data/mise_n_100_eps_01_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100', ylim=c(0,8))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Second chart
load('mise_data/mise_n_100_eps_0001_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .001)), type='l', lwd=3, col=colors[1], main='n = 100', ylim=c(0,10))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Third chart
load('mise_data/mise_n_1000_eps_01_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 1000', ylim=c(0,4))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Fourth chart
load('mise_data/mise_n_1000_eps_0001_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .001)), type='l', lwd=3, col=colors[1], main='n = 1000', ylim=c(0,10))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
par(mfrow=c(2,2))
colors <- c('blue', 'red')
# First chart
load('mise_data/mise_n_100_eps_01_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 100', ylim=c(0,8))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Second chart
load('mise_data/mise_n_100_eps_0001_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .001)), type='l', lwd=3, col=colors[1], main='n = 100', ylim=c(0,10))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Third chart
load('mise_data/mise_n_1000_eps_01_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .1)), type='l', lwd=3, col=colors[1], main='n = 1000', ylim=c(0,3))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Fourth chart
load('mise_data/mise_n_1000_eps_0001_sizesample_50.RData')
mise_p_vec <- mise$mise_p
mise_q_vec <- mise$mise_q
plot(5:(length(mise_p_vec)+4), mise_p_vec, ylab='MISE', xlab='m',sub = expression(paste(epsilon,' = ', .001)), type='l', lwd=3, col=colors[1], main='n = 1000', ylim=c(0,10))
points(5:(length(mise_q_vec)+4), mise_q_vec, type='l', lwd=3, col=colors[2])
# legend('topleft', legend=c(expression(hat(p)), expression(hat(q))), col=colors, lwd=3)
# Defining step functions for p_hat and q_hat
p_hat_func <- function(x, m){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- p_hat[interval == levels]
return(f)
}
q_hat_func <- function(x){
interval <- cut(x, bins, include.lowest = T)
levels   <- levels(interval)
f        <- q_hat[interval == levels]
return(f)
}
# Defining MSE function (value inside integral of MISE)
MSE_p <- function(x) (dbeta(x, 10, 10) - p_hat_func(x))^2
MSE_q <- function(x) (dbeta(x, 10, 10) - q_hat_func(x))^2
M <- seq(5, 10, 1)
n <- 100
eps <- .1
mise_p <- c()
mise_q <- c()
for(m in M){
print(m)
for(rep in 1:1000){
integral_p <- c()
integral_q <- c()
# Setting h
h <- 1/m
# Generating the random sample from the beta
X <- rbeta(n, 10, 10)
# Set the bins
bins <- seq(0, 1, h)
# Rename units with the bins they belong
intervals <- cut(X, bins, include.lowest = T)
# Finding the frequencies of units inside each bins
pj_hat <- table(intervals) / n
# Computing high of each bin dividing the frequencies for the width of the bin
p_hat <- as.vector(pj_hat / h)
p_hat
# Generating m values from a Laplacian: one for each bin
nu <- rlaplace(m, 0, 2/eps)
nu
# Adding nu to every absolute frequencies of each bin
Dj <- table(intervals) + nu
# Finding qj_hat dividing max(0, Dj) for the sum of Dj
qj_hat <- c()
for(d in Dj){
qj_hat <- c(qj_hat, max(d,0))
}
if (sum(qj_hat) != 0){
qj_hat <- qj_hat / sum(qj_hat)} else {qj_hat <- rep(0, length(qj_hat))}
# Computing the high of the histogram dividing by the width of the columns
q_hat <- qj_hat / h
# Computing integral
p <- integrate(Vectorize(MSE_p), lower=0, upper=1, subdivisions=2000)$value
q <- integrate(Vectorize(MSE_q), lower=0, upper=1, subdivisions=2000)$value
integral_p <- c(integral_p, p)
integral_q <- c(integral_q, q)
}
mise_p <- c(mise_p, mean(integral_p))
mise_q <- c(mise_q, mean(integral_q))
}
